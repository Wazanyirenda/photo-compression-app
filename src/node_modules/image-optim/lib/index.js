'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Optimizer = function () {
  function Optimizer() {
    _classCallCheck(this, Optimizer);
  }

  _createClass(Optimizer, [{
    key: 'getBin',
    value: function getBin(vendorName) {
      var execPath = _path2.default.resolve(__dirname, '../vendor', vendorName, process.platform);
      if (process.platform === 'linux') execPath = _path2.default.resolve(execPath, process.arch, vendorName);
      if (process.platform === 'win32') execPath = _path2.default.resolve(execPath, vendorName + '.exe');
      if (process.platform === 'darwin') execPath = _path2.default.join(execPath, vendorName);
      return execPath;
    }
  }, {
    key: 'contains',
    value: function contains(array, val) {
      var contains = false;
      return array.indexOf(val) >= 0;
    }
  }, {
    key: 'isPng',
    value: function isPng(filePath) {
      var extension = _path2.default.extname(filePath).slice(1);
      return this.contains(Optimizer.pngExtensions, extension.toLowerCase());
    }
  }, {
    key: 'isJpg',
    value: function isJpg(filePath) {
      var extension = _path2.default.extname(filePath).slice(1);
      return this.contains(Optimizer.jpgExtensions, extension.toLowerCase());
    }
  }, {
    key: 'getExecutable',
    value: function getExecutable(filePath) {
      if (this.isPng(filePath)) return this.getBin('optipng');
      if (this.isJpg(filePath)) return this.getBin('jpegtran');
    }
  }, {
    key: 'getArgs',
    value: function getArgs(filePath) {
      var optipng = [filePath];
      var jpegtran = ['-outfile', filePath, '-optimize', filePath];
      if (this.isPng(filePath)) return optipng;
      if (this.isJpg(filePath)) return jpegtran;
    }
  }, {
    key: 'canBeOptimized',
    value: function canBeOptimized(filePath) {
      var extension = _path2.default.extname(filePath).slice(1);
      return this.contains([].concat(_toConsumableArray(Optimizer.pngExtensions), _toConsumableArray(Optimizer.jpgExtensions)), extension.toLowerCase());
    }
  }, {
    key: 'getTemporaryLocation',
    value: function getTemporaryLocation(filePath) {
      var ext = _path2.default.extname(filePath);
      var tmpFilePath = _path2.default.join(_os2.default.tmpDir(), _crypto2.default.createHash('md5').update(filePath).digest('hex') + ext);
      return tmpFilePath;
    }
  }, {
    key: 'copyFile',
    value: function copyFile(from, to) {
      return new Promise(function (resolve, reject) {
        var readStream = _fs2.default.createReadStream(from);
        var writeStream = _fs2.default.createWriteStream(to);
        readStream.on('error', reject);
        writeStream.on('error', reject);
        readStream.on('close', function () {
          return resolve(to);
        });
        readStream.pipe(writeStream);
      });
    }
  }, {
    key: 'copyFileToTemporaryLocation',
    value: function copyFileToTemporaryLocation(filePath) {
      var tmpFilePath = this.getTemporaryLocation(filePath);
      return this.copyFile(filePath, tmpFilePath);
    }
  }, {
    key: 'spawn',
    value: function spawn(command, args) {
      return new Promise(function (resolve, reject) {
        var cp = _child_process2.default.spawn(command, args);
        cp.on('error', reject);
        cp.on('exit', function (code) {
          if (code === 0) return resolve();
          reject('Process Failed');
        });
      });
    }
  }, {
    key: 'optimize',
    value: function optimize(filePath) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        if (!_this.canBeOptimized(filePath)) return reject(new Error('This file can not be optimized.'));
        var temporaryFilePath = null;
        _this.copyFileToTemporaryLocation(filePath).then(function (tmpFilePath) {
          temporaryFilePath = tmpFilePath;
          var command = _this.getExecutable(tmpFilePath);
          var args = _this.getArgs(tmpFilePath);
          return _this.spawn(command, args);
        }).then(function () {
          return _this.copyFile(temporaryFilePath, filePath);
        }).then(resolve).catch(reject);
      });
    }
  }]);

  return Optimizer;
}();

Optimizer.pngExtensions = ['png'];
Optimizer.jpgExtensions = ['jpg', 'jpeg'];
exports.default = new Optimizer();